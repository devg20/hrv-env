#Documentation of Analystic functions: https://aura-healthcare.github.io/hrv-analysis/hrvanalysis.html#module-hrvanalysis.extract_features

from hrvanalysis import remove_outliers, remove_ectopic_beats, interpolate_nan_values, get_nn_intervals, get_time_domain_features, get_frequency_domain_features, get_geometrical_features, get_poincare_plot_features, get_csi_cvi_features, get_sampen
from hrvanalysis import plot_distrib, plot_poincare, plot_psd, plot_timeseries
from flask import Flask, request, jsonify, render_template
from flask_cors import CORS, cross_origin
import json
import pandas as pd
import os

"""
data = pd.read_csv("example-RR-Data.csv")
datalist = []
for ele in data['RR']:
   datalist.append(ele)
print(datalist)
"""
"""
data1 = [0.7390000000000001, 0.752, 0.745, 0.725, 0.7120000000000001, 0.695, 0.667, 0.698, 0.73, 0.726, 0.7120000000000001, 0.728, 0.7290000000000001, 0.728, 0.713, 0.723, 0.735, 0.72, 0.708, 0.7170000000000001, 0.723, 0.713, 0.6829999999999999, 0.685, 0.6890000000000001, 0.703, 0.685, 0.6890000000000001, 0.705, 0.732, 0.75, 0.7340000000000001, 0.767, 0.772, 0.757, 0.723, 0.727, 0.732, 0.731, 0.7290000000000001, 0.747, 0.742, 0.731, 0.73, 0.735, 0.78, 0.774, 0.852, 0.9009999999999999, 0.884, 0.893, 0.894, 0.826, 0.79, 0.804, 0.825, 0.805, 0.878, 0.919, 0.875, 0.8440000000000001, 0.8240000000000001, 0.797, 0.765, 0.768, 0.792, 0.8170000000000001, 0.7929999999999999, 0.7659999999999999, 0.797, 0.797, 0.7709999999999999, 0.764, 0.789, 0.7879999999999999, 0.782, 0.767, 0.7609999999999999, 0.794, 0.809, 0.809, 0.804, 0.778, 0.757, 0.759, 0.782, 0.789, 0.799, 0.784, 0.768, 0.767, 0.784, 0.758, 0.78, 0.764, 0.768, 0.7709999999999999, 0.748, 0.763, 0.774, 0.799, 0.816, 0.8, 0.795, 0.825, 0.8390000000000001, 0.82, 0.821, 0.841, 0.8220000000000001, 0.7709999999999999, 0.752, 0.7490000000000001, 0.7609999999999999, 0.759, 0.752, 0.778, 0.785, 0.8079999999999999, 0.789, 0.764, 0.76, 0.7709999999999999, 0.745, 0.745, 0.764, 0.79, 0.784, 0.7490000000000001, 0.7290000000000001, 0.735, 0.7340000000000001, 0.736, 0.767, 0.7909999999999999, 0.841, 0.8109999999999999, 0.775, 0.7559999999999999, 0.723, 0.687, 0.6779999999999999, 0.682, 0.69, 0.703, 0.7240000000000001, 0.728, 0.71, 0.677, 0.71, 0.735, 0.747, 0.757, 0.765, 0.7559999999999999, 0.722, 0.716, 0.7240000000000001, 0.7170000000000001, 0.7340000000000001, 0.731, 0.746, 0.758, 0.765, 0.753, 0.743, 0.743, 0.759, 0.732, 0.733, 0.748, 0.7859999999999999, 0.8270000000000001, 0.831, 0.825, 0.802, 0.79, 0.7859999999999999, 0.7809999999999999, 0.826, 0.8170000000000001, 0.8320000000000001, 0.835, 0.828, 0.807, 0.782, 0.7859999999999999, 0.785, 0.7759999999999999, 0.738, 0.753, 0.746, 0.8109999999999999, 0.841, 0.78, 0.7290000000000001, 0.713, 0.71, 0.7290000000000001, 0.757, 0.77, 0.7340000000000001, 0.7290000000000001, 0.713, 0.7140000000000001, 0.725, 0.713, 0.688, 0.6579999999999999, 0.654, 0.652, 0.669, 0.7759999999999999, 0.7929999999999999, 0.83, 0.8540000000000001, 0.825, 0.81, 0.775, 0.782, 0.753, 0.775, 0.8, 0.7859999999999999, 0.773, 0.773, 0.784, 0.8270000000000001, 0.785, 0.735, 0.708, 0.708, 0.733, 0.7759999999999999, 0.762, 0.7390000000000001, 0.725, 0.765, 0.789, 0.799, 0.8059999999999999, 0.799, 0.772, 0.738, 0.7020000000000001, 0.6859999999999999, 0.677, 0.715, 0.745, 0.795, 0.826, 0.875, 0.8809999999999999, 0.875, 0.852, 0.7879999999999999, 0.718, 0.6829999999999999, 0.6729999999999999, 0.698, 0.767, 0.809, 0.866, 0.871, 0.8640000000000001, 0.8320000000000001, 0.8009999999999999, 0.754, 0.721, 0.6729999999999999, 0.6609999999999999, 0.6629999999999999, 0.6920000000000001, 0.794, 0.845, 0.87, 0.871, 0.852, 0.8320000000000001, 0.8029999999999999, 0.764, 0.7340000000000001, 0.713, 0.672, 0.67, 0.6809999999999999, 0.72, 0.743, 0.8270000000000001, 0.838, 0.8390000000000001, 0.8190000000000001, 0.787, 0.748, 0.7070000000000001, 0.672, 0.643, 0.643, 0.655, 0.6970000000000001, 0.805, 0.851, 0.875, 0.887, 0.892, 0.8320000000000001, 0.746, 0.7040000000000001, 0.6970000000000001, 0.6890000000000001, 0.71, 0.713, 0.754, 0.77, 0.7829999999999999, 0.778, 0.73, 0.733, 0.718, 0.6809999999999999, 0.6729999999999999, 0.677, 0.664, 0.6629999999999999, 0.6659999999999999, 0.675, 0.691, 0.67, 0.672, 0.708, 0.745, 0.8, 0.8270000000000001, 0.8009999999999999, 0.816, 0.818, 0.799, 0.748, 0.755, 0.752, 0.7829999999999999, 0.759, 0.75, 0.78, 0.779, 0.7709999999999999, 0.743, 0.747, 0.7490000000000001, 0.758, 0.738, 0.74, 0.754, 0.763, 0.747, 0.7240000000000001, 0.716, 0.721, 0.748, 0.732, 0.7170000000000001, 0.745, 0.76, 0.784, 0.74, 0.721, 0.726, 0.7390000000000001, 0.743, 0.7170000000000001, 0.7, 0.706, 0.752, 0.853, 0.84, 0.828, 0.8420000000000001, 0.856, 0.794, 0.746, 0.762, 0.762, 0.7390000000000001, 0.711, 0.7120000000000001, 0.728, 0.758, 0.758, 0.7859999999999999, 0.805, 0.8140000000000001, 0.7609999999999999, 0.7609999999999999, 0.757, 0.7490000000000001, 0.716, 0.696, 0.706, 0.7170000000000001, 0.733, 0.716, 0.7340000000000001, 0.78, 0.84, 0.778, 0.745, 0.752, 0.7659999999999999, 0.753, 0.726, 0.738, 0.7390000000000001, 0.753, 0.731, 0.726, 0.7709999999999999, 0.8079999999999999, 0.8370000000000001, 0.7609999999999999, 0.742, 0.73, 0.72, 0.6970000000000001, 0.695, 0.7440000000000001, 0.78, 0.836, 0.805, 0.813, 0.818, 0.792, 0.743, 0.7090000000000001, 0.725, 0.753, 0.7909999999999999, 0.804, 0.843, 0.833, 0.773, 0.7240000000000001, 0.6990000000000001, 0.68, 0.6659999999999999, 0.6779999999999999, 0.695, 0.703, 0.7, 0.665, 0.6579999999999999, 0.6729999999999999, 0.6679999999999999, 0.677, 0.7, 0.711, 0.711, 0.701, 0.6779999999999999, 0.6890000000000001, 0.7090000000000001, 0.7290000000000001, 0.77, 0.748]
data2 = [0.904, 0.87, 0.91, 0.914, 0.82, 0.904, 0.914, 0.934, 1.05, 1.052, 0.9440000000000001, 0.97, 0.9840000000000001, 0.924, 0.88, 0.9540000000000001, 1.03, 0.95, 0.9940000000000001, 1.01, 0.93, 0.914, 0.9740000000000001, 0.98, 0.95, 0.9940000000000001, 1.04, 0.94, 0.924, 0.9640000000000001, 0.96, 0.91, 0.9440000000000001, 0.96, 0.91, 0.88, 0.87, 0.8240000000000001, 0.91, 0.9440000000000001, 0.85, 0.8240000000000001, 0.924, 0.9940000000000001, 0.996, 0.92, 0.93, 0.97, 0.98, 0.91, 0.914, 0.92, 0.934, 0.8740000000000001, 0.894, 0.92, 0.9640000000000001, 0.91, 0.93, 0.97, 0.894, 0.934, 1.024, 0.99, 0.89, 0.914, 0.97, 0.9840000000000001, 0.91, 0.96, 0.9640000000000001, 0.8640000000000001, 0.8540000000000001, 0.8340000000000001, 0.81, 0.884, 1.0, 0.9940000000000001, 1.0, 0.9840000000000001, 0.894, 0.91, 0.934, 0.85, 0.81, 0.82, 0.8440000000000001, 0.86, 0.94, 0.9540000000000001, 0.92, 0.84, 0.86, 0.862, 0.83, 0.79, 0.804, 0.86, 0.88, 0.8440000000000001, 0.88, 0.91, 0.894, 0.94, 0.924, 0.88, 0.91, 0.9440000000000001, 0.88, 0.85, 0.884, 0.89, 0.88, 0.84]
#print(min(data1), max(data1))
rr_intervals_without_outliers = remove_outliers(rr_intervals=data1, low_rri=0.650, high_rri=0.900)
interpolated_rr_intervals = interpolate_nan_values(rr_intervals=rr_intervals_without_outliers, interpolation_method="linear")
nn_intervals_list = remove_ectopic_beats(rr_intervals=interpolated_rr_intervals, method="malik")
print(nn_intervals_list)
"""


#data1 = [0.7390000000000001, 0.752, 0.745, 0.725, 0.7120000000000001, 0.695, 0.667, 0.698, 0.73, 0.726, 0.7120000000000001, 0.728, 0.7290000000000001, 0.728, 0.713, 0.723, 0.735, 0.72, 0.708, 0.7170000000000001, 0.723, 0.713, 0.6829999999999999, 0.685, 0.6890000000000001, 0.703, 0.685, 0.6890000000000001, 0.705, 0.732, 0.75, 0.7340000000000001, 0.767, 0.772, 0.757, 0.723, 0.727, 0.732, 0.731, 0.7290000000000001, 0.747, 0.742, 0.731, 0.73, 0.735, 0.78, 0.774, 0.852, 0.9009999999999999, 0.884, 0.893, 0.894, 0.826, 0.79, 0.804, 0.825, 0.805, 0.878, 0.919, 0.875, 0.8440000000000001, 0.8240000000000001, 0.797, 0.765, 0.768, 0.792, 0.8170000000000001, 0.7929999999999999, 0.7659999999999999, 0.797, 0.797, 0.7709999999999999, 0.764, 0.789, 0.7879999999999999, 0.782, 0.767, 0.7609999999999999, 0.794, 0.809, 0.809, 0.804, 0.778, 0.757, 0.759, 0.782, 0.789, 0.799, 0.784, 0.768, 0.767, 0.784, 0.758, 0.78, 0.764, 0.768, 0.7709999999999999, 0.748, 0.763, 0.774, 0.799, 0.816, 0.8, 0.795, 0.825, 0.8390000000000001, 0.82, 0.821, 0.841, 0.8220000000000001, 0.7709999999999999, 0.752, 0.7490000000000001, 0.7609999999999999, 0.759, 0.752, 0.778, 0.785, 0.8079999999999999, 0.789, 0.764, 0.76, 0.7709999999999999, 0.745, 0.745, 0.764, 0.79, 0.784, 0.7490000000000001, 0.7290000000000001, 0.735, 0.7340000000000001, 0.736, 0.767, 0.7909999999999999, 0.841, 0.8109999999999999, 0.775, 0.7559999999999999, 0.723, 0.687, 0.6779999999999999, 0.682, 0.69, 0.703, 0.7240000000000001, 0.728, 0.71, 0.677, 0.71, 0.735, 0.747, 0.757, 0.765, 0.7559999999999999, 0.722, 0.716, 0.7240000000000001, 0.7170000000000001, 0.7340000000000001, 0.731, 0.746, 0.758, 0.765, 0.753, 0.743, 0.743, 0.759, 0.732, 0.733, 0.748, 0.7859999999999999, 0.8270000000000001, 0.831, 0.825, 0.802, 0.79, 0.7859999999999999, 0.7809999999999999, 0.826, 0.8170000000000001, 0.8320000000000001, 0.835, 0.828, 0.807, 0.782, 0.7859999999999999, 0.785, 0.7759999999999999, 0.738, 0.753, 0.746, 0.8109999999999999, 0.841, 0.78, 0.7290000000000001, 0.713, 0.71, 0.7290000000000001, 0.757, 0.77, 0.7340000000000001, 0.7290000000000001, 0.713, 0.7140000000000001, 0.725, 0.713, 0.688, 0.6579999999999999, 0.654, 0.652, 0.669, 0.7759999999999999, 0.7929999999999999, 0.83, 0.8540000000000001, 0.825, 0.81, 0.775, 0.782, 0.753, 0.775, 0.8, 0.7859999999999999, 0.773, 0.773, 0.784, 0.8270000000000001, 0.785, 0.735, 0.708, 0.708, 0.733, 0.7759999999999999, 0.762, 0.7390000000000001, 0.725, 0.765, 0.789, 0.799, 0.8059999999999999, 0.799, 0.772, 0.738, 0.7020000000000001, 0.6859999999999999, 0.677, 0.715, 0.745, 0.795, 0.826, 0.875, 0.8809999999999999, 0.875, 0.852, 0.7879999999999999, 0.718, 0.6829999999999999, 0.6729999999999999, 0.698, 0.767, 0.809, 0.866, 0.871, 0.8640000000000001, 0.8320000000000001, 0.8009999999999999, 0.754, 0.721, 0.6729999999999999, 0.6609999999999999, 0.6629999999999999, 0.6920000000000001, 0.794, 0.845, 0.87, 0.871, 0.852, 0.8320000000000001, 0.8029999999999999, 0.764, 0.7340000000000001, 0.713, 0.672, 0.67, 0.6809999999999999, 0.72, 0.743, 0.8270000000000001, 0.838, 0.8390000000000001, 0.8190000000000001, 0.787, 0.748, 0.7070000000000001, 0.672, 0.643, 0.643, 0.655, 0.6970000000000001, 0.805, 0.851, 0.875, 0.887, 0.892, 0.8320000000000001, 0.746, 0.7040000000000001, 0.6970000000000001, 0.6890000000000001, 0.71, 0.713, 0.754, 0.77, 0.7829999999999999, 0.778, 0.73, 0.733, 0.718, 0.6809999999999999, 0.6729999999999999, 0.677, 0.664, 0.6629999999999999, 0.6659999999999999, 0.675, 0.691, 0.67, 0.672, 0.708, 0.745, 0.8, 0.8270000000000001, 0.8009999999999999, 0.816, 0.818, 0.799, 0.748, 0.755, 0.752, 0.7829999999999999, 0.759, 0.75, 0.78, 0.779, 0.7709999999999999, 0.743, 0.747, 0.7490000000000001, 0.758, 0.738, 0.74, 0.754, 0.763, 0.747, 0.7240000000000001, 0.716, 0.721, 0.748, 0.732, 0.7170000000000001, 0.745, 0.76, 0.784, 0.74, 0.721, 0.726, 0.7390000000000001, 0.743, 0.7170000000000001, 0.7, 0.706, 0.752, 0.853, 0.84, 0.828, 0.8420000000000001, 0.856, 0.794, 0.746, 0.762, 0.762, 0.7390000000000001, 0.711, 0.7120000000000001, 0.728, 0.758, 0.758, 0.7859999999999999, 0.805, 0.8140000000000001, 0.7609999999999999, 0.7609999999999999, 0.757, 0.7490000000000001, 0.716, 0.696, 0.706, 0.7170000000000001, 0.733, 0.716, 0.7340000000000001, 0.78, 0.84, 0.778, 0.745, 0.752, 0.7659999999999999, 0.753, 0.726, 0.738, 0.7390000000000001, 0.753, 0.731, 0.726, 0.7709999999999999, 0.8079999999999999, 0.8370000000000001, 0.7609999999999999, 0.742, 0.73, 0.72, 0.6970000000000001, 0.695, 0.7440000000000001, 0.78, 0.836, 0.805, 0.813, 0.818, 0.792, 0.743, 0.7090000000000001, 0.725, 0.753, 0.7909999999999999, 0.804, 0.843, 0.833, 0.773, 0.7240000000000001, 0.6990000000000001, 0.68, 0.6659999999999999, 0.6779999999999999, 0.695, 0.703, 0.7, 0.665, 0.6579999999999999, 0.6729999999999999, 0.6679999999999999, 0.677, 0.7, 0.711, 0.711, 0.701, 0.6779999999999999, 0.6890000000000001, 0.7090000000000001, 0.7290000000000001, 0.77, 0.748]
#data=[739.0, 752.0, 745.0, 725.0, 712.0, 695.0, 667.0, 698.0, 730.0, 726.0, 712.0, 728.0, 729.0, 728.0, 713.0, 723.0, 735.0, 720.0, 708.0, 717.0, 723.0, 713.0, 683.0, 685.0, 689.0, 703.0, 685.0, 689.0, 705.0, 732.0, 750.0, 734.0, 767.0, 772.0, 757.0, 723.0, 727.0, 732.0, 731.0, 729.0, 747.0, 742.0, 731.0, 730.0, 735.0, 780.0, 774.0, 852.0, 901.0, 884.0, 893.0, 894.0, 826.0, 790.0, 804.0, 825.0, 805.0, 878.0, 919.0, 875.0, 844.0, 824.0, 797.0, 765.0, 768.0, 792.0, 817.0, 793.0, 766.0, 797.0, 797.0, 771.0, 764.0, 789.0, 788.0, 782.0, 767.0, 761.0, 794.0, 809.0, 809.0, 804.0, 778.0, 757.0, 759.0, 782.0, 789.0, 799.0, 784.0, 768.0, 767.0, 784.0, 758.0, 780.0, 764.0, 768.0, 771.0, 748.0, 763.0, 774.0, 799.0, 816.0, 800.0, 795.0, 825.0, 839.0, 820.0, 821.0, 841.0, 822.0, 771.0, 752.0, 749.0, 761.0, 759.0, 752.0, 778.0, 785.0, 808.0, 789.0, 764.0, 760.0, 771.0, 745.0, 745.0, 764.0, 790.0, 784.0, 749.0, 729.0, 735.0, 734.0, 736.0, 767.0, 791.0, 841.0, 811.0, 775.0, 756.0, 723.0, 687.0, 678.0, 682.0, 690.0, 703.0, 724.0, 728.0, 710.0, 677.0, 710.0, 735.0, 747.0, 757.0, 765.0, 756.0, 722.0, 716.0, 724.0, 717.0, 734.0, 731.0, 746.0, 758.0, 765.0, 753.0, 743.0, 743.0, 759.0, 732.0, 733.0, 748.0, 786.0, 827.0, 831.0, 825.0, 802.0, 790.0, 786.0, 781.0, 826.0, 817.0, 832.0, 835.0, 828.0, 807.0, 782.0, 786.0, 785.0, 776.0, 738.0, 753.0, 746.0, 811.0, 841.0, 780.0, 729.0, 713.0, 710.0, 729.0, 757.0, 770.0, 734.0, 729.0, 713.0, 714.0, 725.0, 713.0, 688.0, 658.0, 654.0, 652.0, 669.0, 776.0, 793.0, 830.0, 854.0, 825.0, 810.0, 775.0, 782.0, 753.0, 775.0, 800.0, 786.0, 773.0, 773.0, 784.0, 827.0, 785.0, 735.0, 708.0, 708.0, 733.0, 776.0, 762.0, 739.0, 725.0, 765.0, 789.0, 799.0, 806.0, 799.0, 772.0, 738.0, 702.0, 686.0, 677.0, 715.0, 745.0, 795.0, 826.0, 875.0, 881.0, 875.0, 852.0, 788.0, 718.0, 683.0, 673.0, 698.0, 767.0, 809.0, 866.0, 871.0, 864.0, 832.0, 801.0, 754.0, 721.0, 673.0, 661.0, 663.0, 692.0, 794.0, 845.0, 870.0, 871.0, 852.0, 832.0, 803.0, 764.0, 734.0, 713.0, 672.0, 670.0, 681.0, 720.0, 743.0, 827.0, 838.0, 839.0, 819.0, 787.0, 748.0, 707.0, 672.0, 643.0, 643.0, 655.0, 697.0, 805.0, 851.0, 875.0, 887.0, 892.0, 832.0, 746.0, 704.0, 697.0, 689.0, 710.0, 713.0, 754.0, 770.0, 783.0, 778.0, 730.0, 733.0, 718.0, 681.0, 673.0, 677.0, 664.0, 663.0, 666.0, 675.0, 691.0, 670.0, 672.0, 708.0, 745.0, 800.0, 827.0, 801.0, 816.0, 818.0, 799.0, 748.0, 755.0, 752.0, 783.0, 759.0, 750.0, 780.0, 779.0, 771.0, 743.0, 747.0, 749.0, 758.0, 738.0, 740.0, 754.0, 763.0, 747.0, 724.0, 716.0, 721.0, 748.0, 732.0, 717.0, 745.0, 760.0, 784.0, 740.0, 721.0, 726.0, 739.0, 743.0, 717.0, 700.0, 706.0, 752.0, 853.0, 840.0, 828.0, 842.0, 856.0, 794.0, 746.0, 762.0, 762.0, 739.0, 711.0, 712.0, 728.0, 758.0, 758.0, 786.0, 805.0, 814.0, 761.0, 761.0, 757.0, 749.0, 716.0, 696.0, 706.0, 717.0, 733.0, 716.0, 734.0, 780.0, 840.0, 778.0, 745.0, 752.0, 766.0, 753.0, 726.0, 738.0, 739.0, 753.0, 731.0, 726.0, 771.0, 808.0, 837.0, 761.0, 742.0, 730.0, 720.0, 697.0, 695.0, 744.0, 780.0, 836.0, 805.0, 813.0, 818.0, 792.0, 743.0, 709.0, 725.0, 753.0, 791.0, 804.0, 843.0, 833.0, 773.0, 724.0, 699.0, 680.0, 666.0, 678.0, 695.0, 703.0, 700.0, 665.0, 658.0, 673.0, 668.0, 677.0, 700.0, 711.0, 711.0, 701.0, 678.0, 689.0, 709.0, 729.0, 770.0, 748.0]
app = Flask(__name__)
cors = CORS(app)
app.config['CORS_HEADERS'] = 'Content-Type'

def analytics(data, key, low_rri, high_rri, emethod, fmethod, samp_freq, vlf_band, lf_band, hf_band):
   #Data Cleaning
   rr_intervals_without_outliers = remove_outliers(rr_intervals=data, low_rri=low_rri, high_rri=high_rri)
   interpolated_rr_intervals = interpolate_nan_values(rr_intervals=rr_intervals_without_outliers, interpolation_method="linear")
   nn_intervals_list = remove_ectopic_beats(rr_intervals=interpolated_rr_intervals, method=emethod)
   #interpolated_nn_intervals_list = get_nn_intervals(data, low_rri = low_rri, high_rri = high_rri, interpolation_method = 'linear', ectopic_beats_removal_method = emethod)


   #Time Domain Analysis
   time_domain_features = get_time_domain_features(nn_intervals_list)
   #Converting int32 values to float as int32 in not JSON serializable
   for k, v in time_domain_features.items():
      time_domain_features[k] = float(v)
        
   #Frequency Domain Analysis
   #frequency_domain_features = get_frequency_domain_features(nn_intervals_list, method = 'welch', sampling_frequency = 4, interpolation_method = 'linear', vlf_band = (0.003, 0.04), lf_band = (0.04, 0.15), hf_band = (0.15, 0.4))
   try:
      frequency_domain_features = get_frequency_domain_features(nn_intervals_list, method = fmethod, sampling_frequency = samp_freq, interpolation_method = 'linear', vlf_band = vlf_band, lf_band = lf_band, hf_band = hf_band) 
   except Exception as excp:
      #print(excp)
      frequency_domain_features = {"result":"rri range or method of ectopic beats removal not suitable"}

   #Geometric Analysis
   geometric_analysis_features = get_geometrical_features(nn_intervals_list)
   print(geometric_analysis_features)

   #Poincare Plot Features
   poincare_plot_features = get_poincare_plot_features(nn_intervals_list)
   #Converting int32 values to float as int32 in not JSON serializable
   for k, v in poincare_plot_features.items():
      poincare_plot_features[k] = float(v)
   print(poincare_plot_features)
    #CSI CVI Features
   csi_cvi_features = get_csi_cvi_features(nn_intervals_list)
   #Converting int32 values to float as int32 in not JSON serializable
   for k, v in csi_cvi_features.items():
      csi_cvi_features[k] = float(v)
   #print(csi_cvi_features)
    #Sample Entropy
   sampen = get_sampen(nn_intervals_list)
   #Converting int32 values to float as int32 in not JSON serializable
   for k, v in sampen.items():
      sampen[k] = float(v)
   #print(sampen)
      
   mod_data = nn_intervals_list
   del_data = list(list(set(data)-set(mod_data)) + list(set(mod_data)-set(data)))
   print(type(mod_data))
   send = {
      'raw_data': data,
      'mod_data' : mod_data,
      'del_data': del_data,
      'time_domain_features' : time_domain_features,
      'frequency_domain_features': frequency_domain_features,
      'geometric_analysis_features' : geometric_analysis_features,
      'poincare_plot_features': poincare_plot_features,
      'csi_cvi_features' : csi_cvi_features,
      'sample_entropy' : sampen['sampen'],
      'key': key,
   }
   send = json.dumps(send)
   send = json.loads(send)
   return send

@app.route('/')
def getData():
   return render_template("gdata.html") 

#@app.route('/', methods=['GET','POST'], defaults={'key': 0, 'rdata':'0.7390000000000001, 0.752, 0.745, 0.725'})
#@app.route('/<key>/<rdata>', methods=['GET','POST'])
@app.route('/webm', methods=['GET','POST'])
def web_mode():
   if request.method == "POST":
      d = request.form['data']
      key = int(request.form['key'])
      low_rri = float(request.form['low_rri'])
      high_rri = float(request.form['high_rri'])
      emethod = str(request.form['emethod'])
      fmethod = str(request.form['fmethod'])
      samp_freq = int(request.form['samp_freq'])
      vlf_band = (float(request.form['low_vlf']), float(request.form['high_vlf']))
      lf_band = (float(request.form['low_lf']), float(request.form['high_lf']))
      hf_band = (float(request.form['low_hf']), float(request.form['high_hf']))
      print("\n\n\n", low_rri, high_rri, emethod, fmethod, samp_freq, vlf_band, lf_band, hf_band)
      data = d.strip("[]").split(",")
      #print("\n\n\n\n",data,"\n\n\n\n")
      data = list(map(float, data))
      data = [round(ele, 2) for ele in data]
      #print("\n\n\n\n",data,"\n\n\n\n")
      #print("\n\n\nkey = ", key)
   send = analytics(data, key, low_rri, high_rri, emethod, fmethod, samp_freq, vlf_band, lf_band, hf_band)
   #print(type(send))
   #send = jsonify(send)
   #return jsonify(send)
   return render_template("webm.html", data = send)
   

@app.route("/apim", methods=['POST'])
def api_mode():
   data = request.get_json()
   #print(data)
   d= data['data']
   data1 = d.strip("[]").split(",")
   data1 = list(map(float, data1))
   data1 = [round(ele, 2) for ele in data1]
   key = int(data['key'])
   low_rri = float(data['rri']['low'])
   high_rri = float(data['rri']['high'])
   emethod = str(data['emethod'])
   fmethod = str(data['fmethod'])
   samp_freq = int(data['samp_freq'])
   vlf_band = (float(data['vlf_band']['low']), float(data['vlf_band']['high']))
   lf_band = (float(data['lf_band']['low']), float(data['lf_band']['high']))
   hf_band = (float(data['hf_band']['low']), float(data['hf_band']['high']))
   send = analytics(data1, key, low_rri, high_rri, emethod, fmethod, samp_freq, vlf_band, lf_band, hf_band)
   return send


##################################################


@app.route('/testPlots', methods=['GET','POST'])

def getfig():
   """send = {
         'distrib_b64': [],
         'poincare_b64': [],
         'psd_b64_welch': [],
         'psd_b64_lomb': [],
         'timeseries_b64': [],
   }"""
   if request.method == "POST" or request.method == "GET":
      data = [739.0, 752.0, 745.0, 725.0, 712.0, 695.0, 667.0, 698.0, 730.0, 726.0, 712.0, 728.0, 729.0, 728.0, 713.0, 723.0, 735.0, 720.0, 708.0, 717.0, 723.0, 713.0, 683.0, 685.0, 689.0, 703.0, 685.0, 689.0, 705.0, 732.0, 750.0, 734.0, 767.0, 772.0, 757.0, 723.0, 727.0, 732.0, 731.0, 729.0, 747.0, 742.0, 731.0, 730.0, 735.0, 780.0, 774.0, 852.0, 901.0, 884.0, 893.0, 894.0, 826.0, 790.0, 804.0, 825.0, 805.0, 878.0, 919.0, 875.0, 844.0, 824.0, 797.0, 765.0, 768.0, 792.0, 817.0, 793.0, 766.0, 797.0, 797.0, 771.0, 764.0, 789.0, 788.0, 782.0, 767.0, 761.0, 794.0, 809.0, 809.0, 804.0, 778.0, 757.0, 759.0, 782.0, 789.0, 799.0, 784.0, 768.0, 767.0, 784.0, 758.0, 780.0, 764.0, 768.0, 771.0, 748.0, 763.0, 774.0, 799.0, 816.0, 800.0, 795.0, 825.0, 839.0, 820.0, 821.0, 841.0, 822.0, 771.0, 752.0, 749.0, 761.0, 759.0, 752.0, 778.0, 785.0, 808.0, 789.0, 764.0, 760.0, 771.0, 745.0, 745.0, 764.0, 790.0, 784.0, 749.0, 729.0, 735.0, 734.0, 736.0, 767.0, 791.0, 841.0, 811.0, 775.0, 756.0, 723.0, 687.0, 678.0, 682.0, 690.0, 703.0, 724.0, 728.0, 710.0, 677.0, 710.0, 735.0, 747.0, 757.0, 765.0, 756.0, 722.0, 716.0, 724.0, 717.0, 734.0, 731.0, 746.0, 758.0, 765.0, 753.0, 743.0, 743.0, 759.0, 732.0, 733.0, 748.0, 786.0, 827.0, 831.0, 825.0, 802.0, 790.0, 786.0, 781.0, 826.0, 817.0, 832.0, 835.0, 828.0, 807.0, 782.0, 786.0, 785.0, 776.0, 738.0, 753.0, 746.0, 811.0, 841.0, 780.0, 729.0, 713.0, 710.0, 729.0, 757.0, 770.0, 734.0, 729.0, 713.0, 714.0, 725.0, 713.0, 688.0, 658.0, 654.0, 652.0, 669.0, 776.0, 793.0, 830.0, 854.0, 825.0, 810.0, 775.0, 782.0, 753.0, 775.0, 800.0, 786.0, 773.0, 773.0, 784.0, 827.0, 785.0, 735.0, 708.0, 708.0, 733.0, 776.0, 762.0, 739.0, 725.0, 765.0, 789.0, 799.0, 806.0, 799.0, 772.0, 738.0, 702.0, 686.0, 677.0, 715.0, 745.0, 795.0, 826.0, 875.0, 881.0, 875.0, 852.0, 788.0, 718.0, 683.0, 673.0, 698.0, 767.0, 809.0, 866.0, 871.0, 864.0, 832.0, 801.0, 754.0, 721.0, 673.0, 661.0, 663.0, 692.0, 794.0, 845.0, 870.0, 871.0, 852.0, 832.0, 803.0, 764.0, 734.0, 713.0, 672.0, 670.0, 681.0, 720.0, 743.0, 827.0, 838.0, 839.0, 819.0, 787.0, 748.0, 707.0, 672.0, 643.0, 643.0, 655.0, 697.0, 805.0, 851.0, 875.0, 887.0, 892.0, 832.0, 746.0, 704.0, 697.0, 689.0, 710.0, 713.0, 754.0, 770.0, 783.0, 778.0, 730.0, 733.0, 718.0, 681.0, 673.0, 677.0, 664.0, 663.0, 666.0, 675.0, 691.0, 670.0, 672.0, 708.0, 745.0, 800.0, 827.0, 801.0, 816.0, 818.0, 799.0, 748.0, 755.0, 752.0, 783.0, 759.0, 750.0, 780.0, 779.0, 771.0, 743.0, 747.0, 749.0, 758.0, 738.0, 740.0, 754.0, 763.0, 747.0, 724.0, 716.0, 721.0, 748.0, 732.0, 717.0, 745.0, 760.0, 784.0, 740.0, 721.0, 726.0, 739.0, 743.0, 717.0, 700.0, 706.0, 752.0, 853.0, 840.0, 828.0, 842.0, 856.0, 794.0, 746.0, 762.0, 762.0, 739.0, 711.0, 712.0, 728.0, 758.0, 758.0, 786.0, 805.0, 814.0, 761.0, 761.0, 757.0, 749.0, 716.0, 696.0, 706.0, 717.0, 733.0, 716.0, 734.0, 780.0, 840.0, 778.0, 745.0, 752.0, 766.0, 753.0, 726.0, 738.0, 739.0, 753.0, 731.0, 726.0, 771.0, 808.0, 837.0, 761.0, 742.0, 730.0, 720.0, 697.0, 695.0, 744.0, 780.0, 836.0, 805.0, 813.0, 818.0, 792.0, 743.0, 709.0, 725.0, 753.0, 791.0, 804.0, 843.0, 833.0, 773.0, 724.0, 699.0, 680.0, 666.0, 678.0, 695.0, 703.0, 700.0, 665.0, 658.0, 673.0, 668.0, 677.0, 700.0, 711.0, 711.0, 701.0, 678.0, 689.0, 709.0, 729.0, 770.0, 748.0]
      #data = [round((ele*1000),2) for ele in data]
      emethod = "kamath"
      rr_intervals_without_outliers = remove_outliers(rr_intervals=data, low_rri=650, high_rri=900)
      interpolated_rr_intervals = interpolate_nan_values(rr_intervals=rr_intervals_without_outliers, interpolation_method="linear")
      nn_intervals_list = remove_ectopic_beats(rr_intervals=interpolated_rr_intervals, method=emethod)
      nn_intervals_list_int = [int(round(ele,2)) for ele in nn_intervals_list]
      distrib_b64 = plot_distrib(nn_intervals_list_int,bin_length= int(8)).decode('utf-8')
      poincare_b64 = plot_poincare(nn_intervals_list, plot_sd_features = True).decode('utf-8')
      psd_b64_welch = plot_psd(nn_intervals_list, method = 'welch', sampling_frequency = 4, interpolation_method = 'linear', vlf_band = (0.003, 0.04), lf_band = (0.04,0.15), hf_band = (0.15,0.4)).decode('utf-8')
      psd_b64_lomb = plot_psd(nn_intervals_list, method = 'lomb', sampling_frequency = 4, interpolation_method = 'linear', vlf_band = (0.003, 0.04), lf_band = (0.04,0.15), hf_band = (0.15,0.4)).decode('utf-8')
      timeseries_b64 = plot_timeseries(nn_intervals_list, normalize = True, autoscale = True, y_min = None, y_max = None).decode('utf-8')
      send = {
         'distrib_b64': distrib_b64,
         'poincare_b64': poincare_b64,
         'psd_b64_welch': psd_b64_welch,
         'psd_b64_lomb': psd_b64_lomb,
         'timeseries_b64': timeseries_b64,
      }
      send = json.dumps(send)
      send = json.loads(send)
   return render_template("plots.html", data = send)

if __name__=='__main__':
    app.run(port=int(os.environ.get('PORT', 5000)), debug=True)


    
